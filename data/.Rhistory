s2.formula = tm_stage2, data=data_female, L=5, boot=F, nBoot=1000, verbose=T, ci=95)
## Telescope matching - First stage (X and Z)
tm_stage1 <- exhealth30 ~ treat*(schobef + trainyrbef + jobeverbef + jobyrbef + health012 + health0mis +  pe_prb0 + pe_prb0mis +
everalc + alc12 + everilldrugs + age_cat + edumis + eduhigh + rwhite + everarr + hhsize + hhsizemis +  hhinc12 + hhinc8 + fdstamp +
welf1 + welf2 + publicass + emplq4 + emplq4full + pemplq4 + pemplq4mis + vocq4 + vocq4mis +
health1212 + health123 + pe_prb12 + pe_prb12mis  +
narry1 + numkidhhf1zero + numkidhhf1onetwo + pubhse12 + h_ins12a + h_ins12amis)
## Telescope matching - second stage (X)
tm_stage2 <- exhealth30 ~ treat*(schobef + trainyrbef + jobeverbef + jobyrbef + health012 + health0mis +  pe_prb0 + pe_prb0mis +
everalc + alc12 + everilldrugs + age_cat + edumis + eduhigh +  rwhite + everarr + hhsize + hhsizemis + hhinc12 + hhinc8 + fdstamp +
welf1 + welf2 + publicass)
### Estimate for women
telescopeMatch.result.1 <-  telescope_match(outcome = "exhealth30", treatment = "treat", mediator = "work2year2qREV",
s1.formula = tm_stage1,
s2.formula = tm_stage2, data=data_female, L=5, boot=F, nBoot=1000, verbose=T, ci=95)
test <- lm(tm_stage1, data=data_female[data_female[[work2year2qREV]]==0,])
test <- lm(tm_stage1, data=data_female[data_female[[data_female$work2year2qREV]]==0,])
test <- lm(tm_stage1, data=data_female[data_female[data_female$work2year2qREV==0,])
test <- lm(tm_stage1, data=data_female[data_female$work2year2qREV==0,])
summary(test)
## Telescope matching - First stage (X and Z)
tm_stage1 <- exhealth30 ~ treat*(schobef + trainyrbef + jobeverbef + jobyrbef + health012 + health0mis +  pe_prb0 +
everalc + alc12 + everilldrugs + age_cat +  eduhigh + rwhite + everarr + hhsize + hhsizemis +  hhinc12 + hhinc8 + fdstamp +
welf1 + welf2 + publicass + emplq4 + emplq4full + pemplq4 + pemplq4mis + vocq4 + vocq4mis +
health1212 + health123 + pe_prb12 + pe_prb12mis  +
narry1 + numkidhhf1zero + numkidhhf1onetwo + pubhse12 + h_ins12a + h_ins12amis)
## Telescope matching - second stage (X)
tm_stage2 <- exhealth30 ~ treat*(schobef + trainyrbef + jobeverbef + jobyrbef + health012 + health0mis +  pe_prb0 +
everalc + alc12 + everilldrugs + age_cat +  eduhigh +  rwhite + everarr + hhsize + hhsizemis + hhinc12 + hhinc8 + fdstamp +
welf1 + welf2 + publicass)
test <- lm(tm_stage1, data=data_female[data_female$work2year2qREV==0,])
### Estimate for women
telescopeMatch.result.1 <-  telescope_match(outcome = "exhealth30", treatment = "treat", mediator = "work2year2qREV",
s1.formula = tm_stage1,
s2.formula = tm_stage2, data=data_female, L=5, boot=F, nBoot=1000, verbose=T, ci=95)
summary(telescopeMatch.result.1)
### Estimate for women
telescopeMatch.result.1 <-  telescope_match(outcome = "exhealth30", treatment = "treat", mediator = "work2year2qREV",
s1.formula = tm_stage1,
s2.formula = tm_stage2, data=data_female, L=3, boot=F, nBoot=1000, verbose=T, ci=95)
telescopeMatch.result.1
### Estimate for women
telescopeMatch.result.1 <-  telescope_match(outcome = "exhealth30", treatment = "treat", mediator = "work2year2qREV",
s1.formula = tm_stage1,
s2.formula = tm_stage2, data=data_female, L=3, boot=F, nBoot=1000, verbose=T, ci=90)
telescopeMatch.result.1
telescopeMatch.result.1 <-  telescope_match(outcome = "exhealth30", treatment = "treat", mediator = "work2year2q",
s1.formula = tm_stage1,
s2.formula = tm_stage2, data=data_female, L=3, boot=F, nBoot=1000, verbose=T, ci=95)
### Estimate for women
telescopeMatch.result.1
#' Perform telescope matching to estimate the controlled
#' direct effect of a binary treatment net the effect of a binary mediator.
#'
#' @param outcome character indicating the name of the
#' variable in \code{data} being used as the outcome. This variable must appear
#' on the left-hand side of both \code{s1.formula} and \code{s2.formula}.
#' @param treatment character indicating the name of the
#' variable in \code{data} being used as the treatment indicator. This variable
#' must be a binary integer (either 0 or 1). This variable must appear
#' on the right-hand side of  \code{s1.formula}. It should also appear in \code{s2.formula}.
#' @param mediator character indicating the name of the
#' variable in \code{data} being used as the mediator indicator. This variable
#' must be a binary integer (either 0 or 1). This method returns controlled direct effects
#' of setting the mediator to 0. Recode the indicator if the controlled direct effect of setting the
#' mediator to 1 is of interest. This variable cannot appear in either
#' \code{s1.formula} or \code{s2.formula}.
#' @param s1.formula  A formula object denoting the stage 1 formula. The outcome should appear on the left-hand side.
#' Treatment, pre- and post-treatment covariates should appear on the right-hand side. The mediator is omitted as the model
#' is fit only within the subset of observations with \code{mediator} equal to 0.
#' @param s2.formula A formula object denoting the stage 2 formula estimating the ACDE of treatment using the demediated
#' matches from the first stage. The outcome should appear on the left-hand side.
#' Treatment and pre-treatment covariates should appear on the right-hand side.
#' @param data A dataframe containing columns referenced by
#' \code{outcome}, \code{treatment} and \code{mediator} along with any variables
#' referenced in \code{s1.formula} and \code{s2.formula}.
#' @param L Number of matches to use for each unit in first and second stages. Default is 5.
#' @param boot logical indicating whether to conduct inference using the weighted bootstrap
#' for matching estimators extended from Otsu and Rai (2017) (\code{TRUE}) or the asymptotic variance
#' estimator from Blackwell and Strezhnev (2019) (\code{FALSE}). Defaults to \code{FALSE}.
#' @param nBoot If \code{boot} is \code{TRUE}, number of bootstrap iterations to use. Default is \code{5000}.
#' @param ci percent level of confidence interval to return. If \code{boot} is \code{FALSE}, returns symmetric asymptotic
#' interval centered on the estimated treatment effect. If \code{boot} is \code{TRUE} returns the \code{(100 - ci)/2} and
#' \code{100 - (100 - ci)/2} percentiles of the bootstrap distribution. Must be in the interval \code{(0, 100)}. Defaults to 95.
#' @param verbose logical indicating whether to display progress information. Default is \code{TRUE}.
#'
#' @details The \code{telescope_match} function implements the two-stage
#' "telescope matching" procedure developed by Blackwell and Strezhnev
#' (2019).
#'
#'  The procedure first estimates a demediated outcome using a combination
#'  of matching and a regression bias-correction. The first stage formula
#'  \code{s1.formula} specifies the pre- and post-treatment covariates to be used
#'  in matching along with the specification for the bias-correction regression. In this stage,
#'  all units with M = 1 to units with M = 0 with identical treatment values and
#'  similar pre- and post-treatment covariates. The potential outcomes under M = 0
#'  are imputed using the average of the matches + the bias correction from the regression
#'  model. The second stage estimates the controlled direct effect of treatment
#'  on this demediated outcome using a similar matching/bias-correction procedure with
#'  the formula specified in \code{s2.formula} indicating the pre-treatment covariates used
#'  along with the treatment.
#'
#' See the references below for more details.
#'
#' @return Returns an object of \code{class} A \code{tmatch}. Contains the following components
#' \itemize{
#' \item estimate: Estimated ACDE fixing M=0
#' \item std.err: Estimated asymptotic standard error. \code{NULL} if \code{boot} is \code{TRUE}
#' \item boot.dist: Bootstrap distribution of \code{estimate}. \code{NULL} if \code{boot} is \code{FALSE}
#' \item conf.low: Lower bound of \code{ci} confidence interval for the estimate
#' \item conf.high: Upper bound of \code{ci} confidence interval for the estimate
#' \item ci: Level of the confidence interval
#' \item outcome: Name of outcome variable
#' \item treatment: Name of treatment variable
#' \item mediator: Name of mediator variable
#' \item s1.formula: Stage 1 bias-correction regression formula (pre-/post-treatment covariates)
#' \item s2.formula: Stage 2 bias-correction regression formula (pre-treatment covariates)
#' \item N: Number of observations
#' \item N_summary: Number of observations in each treatment/mediator combination.
#' }
#' @references Blackwell, Matthew, and Strezhnev, Anton (2019)
#' "Telescope Matching: Reducing Model Dependence
#' in the Estimation of Direct Effects." Working Paper.
#'
#' @examples
#' data(jobcorps)
#'
#' ## Split male/female
#' jobcorps_female <- jobcorps %>% filter(female == 1)
#'
#' ## Telescope matching - First stage (X and Z)
#' tm_stage1 <- exhealth30 ~ treat*(schobef + trainyrbef + jobeverbef + jobyrbef + health012 + health0mis +  pe_prb0 +
#'                                    everalc + alc12 + everilldrugs + age_cat +  eduhigh + rwhite + everarr + hhsize + hhsizemis +  hhinc12 + hhinc8 + fdstamp +
#'                                    welf1 + welf2 + publicass + emplq4 + emplq4full + pemplq4 + pemplq4mis + vocq4 + vocq4mis +
#'                                    health1212 + health123 + pe_prb12 + pe_prb12mis  +
#'                                    narry1 + numkidhhf1zero + numkidhhf1onetwo + pubhse12 + h_ins12a + h_ins12amis)
#'
#' ## Telescope matching - second stage (X)
#' tm_stage2 <- exhealth30 ~ treat*(schobef + trainyrbef + jobeverbef + jobyrbef + health012 + health0mis +  pe_prb0 +
#'                                    everalc + alc12 + everilldrugs + age_cat +  eduhigh +  rwhite + everarr + hhsize + hhsizemis + hhinc12 + hhinc8 + fdstamp +
#'                                    welf1 + welf2 + publicass)
#'
#'
#' ### Estimate ACDE for women holding employment at 0
#' telescopeMatch.result.0 <-  telescope_match(outcome = "exhealth30", treatment = "treat", mediator = "work2year2q",
#'                                            s1.formula = tm_stage1,
#'                                            s2.formula = tm_stage2, data=jobcorps_female, L=3, boot=F, nBoot=1000, verbose=T, ci=95)
#'
#' @export
#' @importFrom Matching Match
#'
telescope_match <- function(outcome, treatment, mediator, s1.formula, s2.formula, data, L=5,
boot = F, nBoot=5000, ci = 95, verbose=T){
########################
### Quick pre-processing
########################
### Force data to be a data frame. Tidy tibbles crash the existing code
data <- as.data.frame(data)
### Get first order terms from s1.formula and s2.formula
s1.terms <- rownames(attributes(terms(s1.formula))$factors)
s2.terms <- rownames(attributes(terms(s2.formula))$factors)
### Number of observations
N <- nrow(data)
####################
#### Sanity checks
####################
### Check -2 - Is the ci within (0, 100).
if (ci <= 0 | ci >= 100){
warning("Warning: 'ci' must be within the interval (0, 100). Defaulting to 95% confidence intervals.")
ci <- 95
}
ci.alpha <- 1 - ci/100
### Check -1 - Outcome, Treatment, Mediator are in data?
if (!is.character(outcome)| !is.character(treatment)| !is.character(mediator)){
stop("Error: 'outcome', 'treatment', and 'mediator' must be characters.")
}else if ((length(outcome) != 1)|(length(treatment) != 1)|(length(mediator) != 1)){
stop("Error: Cannot have a vector greater than length 1 for 'outcome', 'treatment', and 'mediator'.")
}else if (!(outcome %in% colnames(data))|!(treatment %in% colnames(data))|!(mediator %in% colnames(data))){
stop("Error: 'outcome', 'treatment', or 'mediator' not in 'data'.")
}
### Check 0 - Outcome in both s1.terms and s2.terms
if (!(outcome %in% s1.terms)|!(outcome %in% s2.terms)){
stop("Error: 'outcome' not in s1.formula or s2.formula.")
}
## Check 1 - Treatment is in s1.terms and s2.terms
if (!(treatment %in% s1.terms)|!(treatment %in% s2.terms)){
stop("Error: 'treatment' is not in s1.formula or s2.formula")
}
## Check 2 - Mediator isn't in either s1.formula, s2.formula
if ((mediator %in% s1.terms)|(mediator %in% s2.terms)){
stop("Error: 'mediator' in s1.formula or s2.formula.")
}
## Check 3 - Treatment is binary 0-1
if (!(is.numeric(data[[treatment]]))){
stop("Error: 'treatment' variable not numeric.")
}else if(!isTRUE(all.equal(unique(data[[treatment]])[order(unique(data[[treatment]]))], c(0,1)))){
stop("Error: 'treatment' must have only two levels: 0,1")
}
## Check 4 - Mediator is binary 0-1
if (!(is.numeric(data[[mediator]]))){
stop("Error: 'mediator' variable not numeric.")
}else if(!isTRUE(all.equal(unique(data[[mediator]])[order(unique(data[[mediator]]))], c(0,1)))){
stop("Error: 'mediator' must have only two levels: 0,1")
}
### Pre-treatment covariates are s2.terms
pre.treatment <- s2.terms[!(s2.terms %in% c(outcome, treatment, mediator))]
s1.covariates <- s1.terms[!(s1.terms %in% c(outcome, treatment, mediator))]
### Check 5 - Are there any s2.terms that aren't in s1?
if (any(!(pre.treatment %in% s1.covariates))){
stop("Error: some covariates in second stage 's2.formula' not in the first stage 's1.formula'")
}
######################
### Pre-estimation set-up
######################
### Post-treatment covariates are those in first stage but not in second stage
post.treatment <- s1.covariates[!(s1.covariates %in% pre.treatment)]
## Combine all covariates into a single vector
all.covariates <- c(pre.treatment, post.treatment)
## Diagnostic, print implied pre-treatment and post-treatment covariates
if (verbose){
cat("Telescope matching setup:\n")
cat(paste("Outcome: ", outcome, "\n", sep=""))
cat(paste("Treatment: ", treatment, "\n", sep=""))
cat(paste("Mediator: ", mediator, "\n", sep=""))
cat(paste("Pre-treatment Covariates: ", paste(pre.treatment, collapse = ", "), "\n", sep=""))
cat(paste("Post-treatment Covariates: ", paste(post.treatment, collapse = ", "), "\n", sep=""))
cat("\n")
}
######################
### First-stage: Estimate Y(a, 0) conditional on pre-/post-treatment covariates
######################
### First stage matching - inexact on all pre.treatment/post.treatment covariates, exact on A
tm.first <- Match(Y = data[[outcome]], Tr = data[[mediator]], X = data[,c(all.covariates, treatment)],
exact = c(rep(FALSE, length(all.covariates)), TRUE), M=L, BiasAdjust=FALSE, estimand = "ATT", ties=F)
### Summarize input - First Stage
if (verbose){
cat("First-stage matching: Mediator on pre-treatment, post-treatment\n")
cat("Number of observations with 'mediator' = 1: ", sum(data[[mediator]]), "\n", sep = "" )
cat("Number of observations with 'mediator' = 0: ", sum(1 - data[[mediator]]), "\n", sep = "")
cat("\n")
}
### Summarize sample sizes with mediator/treatment
n_summary = table(data[[treatment]],data[[mediator]])
### Count of # of matches for each M=0 unit in the first stage (K_L^m)
KLm <- table(tm.first$index.control)
### Which M=1 units did each M=0 match to?
first_stage_matchedTo <- tapply(tm.first$index.treated, tm.first$index.control, function(x) x)
## Save K_L^m in data
data$KLm <- 0
data[as.numeric(names(KLm)), "KLm"] <- KLm
### Regression imputation in the first stage
s1.reg.0 <- lm(s1.formula, data=data[data[[mediator]]==0,]) ## Fit a regression in the set with mediator = 0
## Predicted value of regression for each X under control
data$pred.Y.m0 <- NA
data$pred.Y.m0 <- predict(s1.reg.0, newdata = data[,c(treatment, pre.treatment, post.treatment)])
#### Average of matched values for each unit
data$y.m0.m.imp <- data[[outcome]] ## Matching imputation
data[unique(tm.first$index.treated), "y.m0.m.imp"] <- tapply(tm.first$index.control, tm.first$index.treated, function(x) mean(data[x, outcome]))
#### Imputed value under M=0 using regression-imputed value of the matches
data$y.m0.r.imp <- data$pred.Y.m0 ## Regression imputation
data[unique(tm.first$index.treated), "y.m0.r.imp"] <- tapply(tm.first$index.control, tm.first$index.treated, function(x) mean(data[x, "pred.Y.m0"]))
### Impute the outcome under M=0 for units with M=1
data$Ytilde <- data[[outcome]] ## Bias-corrected matching imputation for the M=1 units
### Average of imputations + (Regression prediction for X_i - regression prediction for all imputed units)
data$Ytilde[data[[mediator]] == 1] <- data[data[[mediator]] == 1,]$y.m0.m.imp + data[data[[mediator]] == 1,]$pred.Y.m0 - data[data[[mediator]] == 1,]$y.m0.r.imp
################################################
### Second stage - Estimate E[Y(1,0) - Y(0,0)] - conditional on pre-treatment covariates
################################################
### Summarize input - Second stage
if (verbose){
cat("Second-stage matching: Treatment on pre-treatment\n")
cat("Number of observations with 'treatment' = 1: ", sum(data[[treatment]]), "\n", sep = "" )
cat("Number of observations with 'treatment' = 0: ", sum(1 - data[[treatment]]), "\n", sep = "")
cat("\n")
}
### Fix the outcome in s2.formula (replace with Ytilde)
s2.form.character <- as.character(s2.formula)
s2.form.character[2] <- "Ytilde"
s2.formula.fixed <- formula(paste(s2.form.character[2], " ~ ", s2.form.character[3], sep=""))
##### Second stage regression on blipped-down outcome
## Ytilde = Y_i(a, 0)
s2.reg <- lm(s2.formula.fixed, data = data) ## Fully interacted regression of Ytilde with treatment A
data$pred.Y.a1 <- NA
newdata.treat <- data[,c(treatment, pre.treatment)]
newdata.treat[[treatment]] <- 1
data$pred.Y.a1 <- predict(s2.reg, newdata = newdata.treat) ## Predicted outcome under treatment
newdata.ctrl <- data[,c(treatment, pre.treatment)]
newdata.ctrl[[treatment]] <- 0
data$pred.Y.a0 <- NA
data$pred.Y.a0 <-  predict(s2.reg, newdata = newdata.ctrl) ## Predicted outcome under control
data$pred.Y.A <- data[[treatment]] * data$pred.Y.a1 + (1 - data[[treatment]]) * data$pred.Y.a0 ### Predict factual
data$pred.Y.1.A <- data[[treatment]] * data$pred.Y.a0 + (1 - data[[treatment]]) * data$pred.Y.a1 ## Predict counterfactual
### Match controls to treated
tm.second.a1 <- Match(Y = data$Ytilde, Tr = data[[treatment]], X = data[,c(pre.treatment)], estimand = "ATT", M = L, ties=F)
KLa0 <- table(tm.second.a1$index.control) ## Count of matched controls - stage 2
### Match treateds to control
tm.second.a0 <- Match(Y = data$Ytilde, Tr = data[[treatment]], X = data[,c(pre.treatment)], estimand = "ATC", M = L, ties=F)
KLa1 <- table(tm.second.a0$index.treated) ## Count of matched treated - stage 2
## Total match counts - stage 2
data$KLa <- 0
data[as.numeric(names(KLa0)), "KLa"] <- KLa0
data[as.numeric(names(KLa1)), "KLa"] <- KLa1
SLmatch <- lapply(first_stage_matchedTo, function(x) sum(data$KLa[x])) ## Sum of KLa of matched units
data$SLm <- 0
data$SLm[as.integer(names(SLmatch))] <- unlist(SLmatch)
## Imputed Y_i(0,0) of matches - regression
data$Yhat00.r <- data$pred.Y.a0
data[unique(tm.second.a1$index.treated), "Yhat00.r"] <- tapply(tm.second.a1$index.control, tm.second.a1$index.treated, function(x) mean(data[x, "pred.Y.a0"]))
## Imputed Y_i(1,0) of matches - regression
data$Yhat10.r <- data$pred.Y.a1
data[unique(tm.second.a0$index.control), "Yhat10.r"] <- tapply(tm.second.a0$index.treated, tm.second.a0$index.control, function(x) mean(data[x, "pred.Y.a1"]))
## regression imputations of the CEF under 1-A_i
## (1/L) \sum_{j \in J^a(i)} mu_{1-A_i,0}(X_j, 1-A_i)
data$pred.Y.1.A.r <- data[[treatment]] * data$Yhat00.r + (1 - data[[treatment]]) * data$Yhat10.r
## Linearized form for bootstrapping
sm.part <- (1 - data[[mediator]]) * (1 + data$KLa/L + data$KLm/L + data$SLm/(L^2)) * data[[outcome]]
bm.part <- ((1 - data[[mediator]])*(data$KLm/L + data$SLm/(L^2)) - data[[mediator]]*(1 + data$KLa/L))*data$pred.Y.m0
ba.part <- data$pred.Y.1.A + (data$KLa/L)*data$pred.Y.A
data$tau.i <- (2 * data[[treatment]] - 1) * (sm.part - bm.part - ba.part)
## Point estimate
tau <- mean(data$tau.i)
########################################
## Variance estimation
########################################
if (boot == F){
###############
### Asymptotic variance
###################
### Calculate weights
data$ww <- (1 - data[[mediator]]) * (1 + data$KLa/L + data$KLm/L + data$SLm/(L^2))
### Number of units with M=0
N0 <- sum(1 - data[[mediator]])
### Parameters in the first-stage regression
P1 <- length(coef(s1.reg.0))
### Parameters in the second-stage regression
P2 <- length(coef(s2.reg))
### Variance component 1
data$em.var <- (N0/(N0 - P1)) * (data[[outcome]] - data$pred.Y.m0)^2
### Variance component 2
data$ea.var <- (N/(N-P2)) * (data$pred.Y.m0 - data$pred.Y.A)^2
### Variance component 3
tau.var <- mean((data$pred.Y.a1 - data$pred.Y.a0 - tau)^2)
### combine all three components
se.est2 <- sqrt(tau.var/N + (mean((1-data[[mediator]]) * data$ww^2 * data$em.var) + mean((1+data$KLa/L)^2*data$ea.var))/N)
### No bootstrap
Tstar <- NULL
### CI bounds
ci.low = tau - abs(qnorm(ci.alpha/2))*se.est2
ci.high = tau + abs(qnorm(ci.alpha/2))*se.est2
}else{
################
### Wild Bootstrap
################
## De-mean
tau.norm <- data$tau.i - tau
## Bootstrap iterations
W.bern <- sapply(1:nBoot, function(x) rbinom(N, 1, prob = (sqrt(5) - 1)/(2*sqrt(5))))
Wstar <- (((sqrt(5) + 1)/2)*W.bern + (-(sqrt(5) - 1)/2)*(1-W.bern))/N
## Apply bootstrap weights to each "observation"
Tstar <- (t(Wstar) %*% tau.norm)
## Add in tau
Tstar <- Tstar + tau
### Asypmtotic estimate is null
se.est2 <- NULL
### Get quantiles for the CI
ci.low = quantile(Tstar, ci.alpha/2)
ci.high = quantile(Tstar, 1 - ci.alpha/2)
}
### Return output
output <- list(outcome = outcome, treatment = treatment, mediator = mediator, s1.formula = s1.formula, s2.formula = s2.formula,
N = N, N_summary = n_summary,
estimate=tau, std.err = se.est2, boot.dist=as.vector(Tstar), KLm = data$KLm, KLa = data$KLa,
conf.low = ci.low, conf.high = ci.high, ci.level = ci,  tm.first =  tm.first, tm.second.1 = tm.second.a1, tm.second.0 = tm.second.a0)
class(output) <- "tmatch"
return(output)
}
### Working directory
setwd("~/Documents/Research/DirectEffects/data")
### Libraries
library(tidyverse)
library(dplyr)
library(magrittr)
library(haven)
library(estimatr)
library(Matching)
### Open job corps file
load("jobcorps.RData")
## Make abs(1-Mediator) for estimating ATE(1)
jobcorps <- jobcorps %>% mutate(work2year2qREV = abs(1 - work2year2q))
## Split male/female
jobcorps_female <- jobcorps %>% filter(female == 1)
## Covariates don't all match the list, but of the ones that do, match the right summaries.
## Here's what the replication data uses
### Pre-treatment covariates
# schobef - "in school 1yr before eligibility"
# trainyrbef - "training in year before Job Corps"
# jobeverbef - "ever had a job before Job Corps"
# jobyrbef - "job in year before job corps"
# health012 - "good or very good health at assignment"
# health0mis - "general health at assignment missing"
# pe_prb0 -  "physical/emotional problems at assignment"
# pe_prb0mis - "missing - physical/emotional problems at assignment"
# everalc - "ever abused alcohol before assignment"
# alc12 - "alcohol abuse one yr after assignment"
# everilldrugs - "ever took illegal drugs before assignment"
# age_cat - "age at application in years 16-24"
# edumis - "education missing"
# eduhigh - "higher education"
# rwhite - "white"
# everarr - "ever arrested before Job Corps"
# hhsize - "household size at assignment"
# hhsizemis - "household size at assignment missing"
# hhinc12 - "low household income at assignment"
# hhinc8 - "high household income at assignment"
# fdstamp - "received foodstamps in yr before assignment"
# welf1 - "once on welfare while growing up"
# welf2 -  "twice on welfare while growing up"
# publicass - "public assistance in yr before assignment"
### Post-treatment covariates
# emplq - "worked some time 9-12 months after assignment"
# emplq4full - "worked all the time in 9-12 months after assignment"
# pemplq4 - "proportion of weeks worked 9-12 months after assignment"
# pemplq4mis - "missing - proportion of weeks worked 9-12 months after assignment"
# vocq4 -  "in vocational training 9-12 months after assignment"
# vocq4mis - "missing - in vocational training 9-12 months after assignment"
# health1212 - "very good or good health 1 yr after assignment"
# health123 - "fair health 1 yr after assignment"
# pe_prb12 - "1=phys/emot probs at 12 mths 0=no prob"
# pe_prb12mis - "missing - physical/emotional problems 1 yr after assignment"
# narry1 - "number of arrests in year 1"
# numkidhhf1zero -  "no own kids living in household 1 yr after assignment"
# numkidhhf1onetwo - "one or two own kids living in household 1 yr after assignment"
# pubhse12 -  "1=in public housing 1 yr after assignment, 0=not in"
# h_ins12a - "afdc and other transfers one yr after assignment"
# h_ins12amis -  "missing - afdc and other transfers one yr after assignment"
## Telescope matching - First stage (X and Z)
tm_stage1 <- exhealth30 ~ treat*(schobef + trainyrbef + jobeverbef + jobyrbef + health012 + health0mis +  pe_prb0 +
everalc + alc12 + everilldrugs + age_cat +  eduhigh + rwhite + everarr + hhsize + hhsizemis +  hhinc12 + hhinc8 + fdstamp +
welf1 + welf2 + publicass + emplq4 + emplq4full + pemplq4 + pemplq4mis + vocq4 + vocq4mis +
health1212 + health123 + pe_prb12 + pe_prb12mis  +
narry1 + numkidhhf1zero + numkidhhf1onetwo + pubhse12 + h_ins12a + h_ins12amis)
## Telescope matching - second stage (X)
tm_stage2 <- exhealth30 ~ treat*(schobef + trainyrbef + jobeverbef + jobyrbef + health012 + health0mis +  pe_prb0 +
everalc + alc12 + everilldrugs + age_cat +  eduhigh +  rwhite + everarr + hhsize + hhsizemis + hhinc12 + hhinc8 + fdstamp +
welf1 + welf2 + publicass)
### Estimate ACDE for women
telescopeMatch.result.0 <-  telescope_match(outcome = "exhealth30", treatment = "treat", mediator = "work2year2q",
s1.formula = tm_stage1,
s2.formula = tm_stage2, data=jobcorps_female, L=3, boot=F, nBoot=1000, verbose=T, ci=95)
### Estimate ACDE for women
telescopeMatch.result.0
length(telescopeMatch.result.0$KLm)
telescopeMatch.result.0$KLm
length(telescopeMatch.result.0$KLm[jobcorps_female$work2year2q==1])
telescopeMatch.result.0$KLm[jobcorps_female$work2year2q==1]
telescopeMatch.result.0$KLm[jobcorps_female$work2year2q==0]
hist(telescopeMatch.result.0$KLm[jobcorps_female$work2year2q==0])
hist(telescopeMatch.result.0$KLa[jobcorps_female$treat==0])
hist(telescopeMatch.result.0$KLa[jobcorps_female$treat==1])
### Estimate ACDE for women
telescopeMatch.result.0 <-  telescope_match(outcome = "exhealth30", treatment = "treat", mediator = "work2year2q",
s1.formula = tm_stage1,
s2.formula = tm_stage2, data=jobcorps_female, L=1, boot=F, nBoot=1000, verbose=T, ci=95)
hist(telescopeMatch.result.0$KLm[jobcorps_female$work2year2q==0])
### Estimate ACDE for women
telescopeMatch.result.0
telescopeMatch.result.0$conf.low
telescopeMatch.result.0$conf.high
### Estimate ACDE for women
telescopeMatch.result.0 <-  telescope_match(outcome = "exhealth30", treatment = "treat", mediator = "work2year2q",
s1.formula = tm_stage1,
s2.formula = tm_stage2, data=jobcorps_female, L=5, boot=F, nBoot=1000, verbose=T, ci=95)
telescopeMatch.result.0$conf.high
telescopeMatch.result.0$conf.low
hist(telescopeMatch.result.0$KLm[jobcorps_female$work2year2q==0])
hist(telescopeMatch.result.0$KLa[jobcorps_female$treat==1])
hist(telescopeMatch.result.0$KLa[jobcorps_female$treat==0])
### Estimate ACDE for women
telescopeMatch.result.0 <-  telescope_match(outcome = "exhealth30", treatment = "treat", mediator = "work2year2qREV",
s1.formula = tm_stage1,
s2.formula = tm_stage2, data=jobcorps_female, L=5, boot=F, nBoot=1000, verbose=T, ci=95)
hist(telescopeMatch.result.0$KLm[jobcorps_female$work2year2q==0])
hist(telescopeMatch.result.0$KLm[jobcorps_female$work2year2q==1])
hist(telescopeMatch.result.0$KLa[jobcorps_female$treat==1])
hist(telescopeMatch.result.0$KLa[jobcorps_female$treat==0])
hist(telescopeMatch.result.0$KLm)
### Estimate ACDE for women
telescopeMatch.result.0 <-  telescope_match(outcome = "exhealth30", treatment = "treat", mediator = "work2year2q",
s1.formula = tm_stage1,
s2.formula = tm_stage2, data=jobcorps_female,
L=5, boot=F, nBoot=1000, verbose=T, ci=95)
hist(telescopeMatch.result.0$KLm[jobcorps_female$work2year2q==0])
MatchBalance(~ "everalc", telescopeMatch.result.0$tm.first, data=jobcorps_female )
MatchBalance(~ "everalc", match.out=telescopeMatch.result.0$tm.first, data=jobcorps_female )
MatchBalance(~ everalc, match.out=telescopeMatch.result.0$tm.first, data=jobcorps_female )
telescopeMatch.result.0$tm.first
MatchBalance(~ everalc + age_cat, match.out=telescopeMatch.result.0$tm.first, data=jobcorps_female )
telescopeMatch.result.0$tm.first
jobcorps_female
MatchBalance(~ everalc + age_cat, match.out=telescopeMatch.result.0$tm.first, data=data.frame(jobcorps_female))
MatchBalance(mediator ~ everalc , match.out=telescopeMatch.result.0$tm.first, data=data.frame(jobcorps_female))
MatchBalance(work2year2q ~ everalc , match.out=telescopeMatch.result.0$tm.first, data=data.frame(jobcorps_female))
class(telescopeMatch.result.0)
MatchBalance(work2year2q ~ everalc + alc12, match.out=telescopeMatch.result.0$tm.first, data=data.frame(jobcorps_female))
MatchBalance(work2year2q ~ everalc + alc12 + treat, match.out=telescopeMatch.result.0$tm.first, data=data.frame(jobcorps_female))
MatchBalance(work2year2q ~ everalc + alc12 + schobef, match.out=telescopeMatch.result.0$tm.first, data=data.frame(jobcorps_female))
MatchBalance(work2year2q ~ everalc + alc12 + schobef + jobeverbef  + jobyrbef, match.out=telescopeMatch.result.0$tm.first, data=data.frame(jobcorps_female))
MatchBalance(work2year2q ~ rwhite + hhsize + pe_prb0 + everalc + alc12 + schobef + jobeverbef  + jobyrbef, match.out=telescopeMatch.result.0$tm.first, data=data.frame(jobcorps_female))
MatchBalance(work2year2q ~ publicass + rwhite + hhsize + pe_prb0 + everalc + alc12 + schobef + jobeverbef  + jobyrbef, match.out=telescopeMatch.result.0$tm.first, data=data.frame(jobcorps_female))
MatchBalance(work2year2q ~ emplq4 + health012 + publicass + rwhite + hhsize + pe_prb0 + everalc + alc12 + schobef + jobeverbef  + jobyrbef, match.out=telescopeMatch.result.0$tm.first, data=data.frame(jobcorps_female))
MatchBalance(work2year2q ~ emplq4 + jobyrbef, match.out=telescopeMatch.result.0$tm.first, data=data.frame(jobcorps_female))
MatchBalance(work2year2q ~ emplq4 + jobyrbef +  everarr, match.out=telescopeMatch.result.0$tm.first, data=data.frame(jobcorps_female))
