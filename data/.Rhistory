cat(paste("Pre-treatment Covariates: ", paste(pre.treatment, collapse = ", "), "\n", sep=""))
cat(paste("Post-treatment Covariates: ", paste(post.treatment, collapse = ", "), "\n", sep=""))
cat(paste("Number of matches in first stage (mediator): ", L_m, "\n", sep=""))
cat(paste("Number of matches in second stage (treatment): ", L_a, "\n", sep=""))
cat("\n")
}
######################
### First-stage: Estimate Y(a, 0) conditional on pre-/post-treatment covariates
######################
### First stage matching - inexact on all pre.treatment/post.treatment covariates, exact on A"
tm.first <- Match(Y = data[[outcome]], Tr = data[[mediator]], X = data[,c(all.covariates, treatment)],
exact = c(rep(FALSE, length(all.covariates)), TRUE), M=L_m, BiasAdjust=FALSE, estimand = "ATT", ties=F)
### Summarize input - First Stage
if (verbose){
cat("First-stage matching: Mediator on pre-treatment, post-treatment\n")
cat("Number of observations with 'mediator' = 0 matched to each observation with 'mediator' = 1: ", L_m, "\n", sep="")
cat("Number of observations with 'mediator' = 1: ", sum(data[[mediator]]), "\n", sep = "" )
cat("Number of observations with 'mediator' = 0: ", sum(1 - data[[mediator]]), "\n", sep = "")
cat("\n")
}
### Summarize sample sizes with mediator/treatment
n_summary = data.frame(c(0,1,0,1), c(0,0,1,1), as.vector(table(data[[treatment]],data[[mediator]])))
colnames(n_summary) <- c(treatment, mediator, "N")
### Count of # of matches for each M=0 unit in the first stage (K_L^m)
KLm <- table(tm.first$index.control)
### Which M=1 units did each M=0 match to?
first_stage_matchedTo <- tapply(tm.first$index.treated, tm.first$index.control, function(x) x)
## Save K_L^m in data
data$KLm <- 0
data[as.numeric(names(KLm)), "KLm"] <- KLm
### Regression imputation in the first stage
s1.reg.0 <- lm(s1.formula, data=data[data[[mediator]]==0,]) ## Fit a regression in the set with mediator = 0
## Predicted value of regression for each X under control
data$pred.Y.m0 <- NA
data$pred.Y.m0 <- predict(s1.reg.0, newdata = data[,c(treatment, pre.treatment, post.treatment)])
#### Average of matched values for each unit
data$y.m0.m.imp <- data[[outcome]] ## Matching imputation
data[unique(tm.first$index.treated), "y.m0.m.imp"] <- tapply(tm.first$index.control, tm.first$index.treated, function(x) mean(data[x, outcome]))
#### Imputed value under M=0 using regression-imputed value of the matches
data$y.m0.r.imp <- data$pred.Y.m0 ## Regression imputation
data[unique(tm.first$index.treated), "y.m0.r.imp"] <- tapply(tm.first$index.control, tm.first$index.treated, function(x) mean(data[x, "pred.Y.m0"]))
### Impute the outcome under M=0 for units with M=1
data$Ytilde <- data[[outcome]] ## Bias-corrected matching imputation for the M=1 units
### Average of imputations + (Regression prediction for X_i - regression prediction for all imputed units)
data$Ytilde[data[[mediator]] == 1] <- data[data[[mediator]] == 1,]$y.m0.m.imp + data[data[[mediator]] == 1,]$pred.Y.m0 - data[data[[mediator]] == 1,]$y.m0.r.imp
################################################
### Second stage - Estimate E[Y(1,0) - Y(0,0)] - conditional on pre-treatment covariates
################################################
### Summarize input - Second stage
if (verbose){
cat("Second-stage matching: Treatment on pre-treatment\n")
cat("Number of observations matched to each unit with opposite treatment: ", L_a,  "\n", sep="")
cat("Number of observations with 'treatment' = 1: ", sum(data[[treatment]]), "\n", sep = "" )
cat("Number of observations with 'treatment' = 0: ", sum(1 - data[[treatment]]), "\n", sep = "")
cat("\n")
}
### Fix the outcome in s2.formula (replace with Ytilde)
s2.form.character <- as.character(s2.formula)
s2.form.character[2] <- "Ytilde"
s2.formula.fixed <- formula(paste(s2.form.character[2], " ~ ", s2.form.character[3], sep=""))
##### Second stage regression on blipped-down outcome
## Ytilde = Y_i(a, 0)
s2.reg <- lm(s2.formula.fixed, data = data) ## Fully interacted regression of Ytilde with treatment A
data$pred.Y.a1 <- NA
newdata.treat <- data[,c(treatment, pre.treatment)]
newdata.treat[[treatment]] <- 1
data$pred.Y.a1 <- predict(s2.reg, newdata = newdata.treat) ## Predicted outcome under treatment
newdata.ctrl <- data[,c(treatment, pre.treatment)]
newdata.ctrl[[treatment]] <- 0
data$pred.Y.a0 <- NA
data$pred.Y.a0 <-  predict(s2.reg, newdata = newdata.ctrl) ## Predicted outcome under control
data$pred.Y.A <- data[[treatment]] * data$pred.Y.a1 + (1 - data[[treatment]]) * data$pred.Y.a0 ### Predict factual
data$pred.Y.1.A <- data[[treatment]] * data$pred.Y.a0 + (1 - data[[treatment]]) * data$pred.Y.a1 ## Predict counterfactual
### Match controls to treated
tm.second.a1 <- Match(Y = data$Ytilde, Tr = data[[treatment]], X = data[,c(pre.treatment)], estimand = "ATT", M = L_a, ties=F)
KLa0 <- table(tm.second.a1$index.control) ## Count of matched controls - stage 2
### Match treateds to control
tm.second.a0 <- Match(Y = data$Ytilde, Tr = data[[treatment]], X = data[,c(pre.treatment)], estimand = "ATC", M = L_a, ties=F)
KLa1 <- table(tm.second.a0$index.treated) ## Count of matched treated - stage 2
## Total match counts - stage 2
data$KLa <- 0
data[as.numeric(names(KLa0)), "KLa"] <- KLa0
data[as.numeric(names(KLa1)), "KLa"] <- KLa1
SLmatch <- lapply(first_stage_matchedTo, function(x) sum(data$KLa[x])) ## Sum of KLa of matched units
data$SLm <- 0
data$SLm[as.integer(names(SLmatch))] <- unlist(SLmatch)
## Imputed Y_i(0,0) of matches - regression
data$Yhat00.r <- data$pred.Y.a0
data[unique(tm.second.a1$index.treated), "Yhat00.r"] <- tapply(tm.second.a1$index.control, tm.second.a1$index.treated, function(x) mean(data[x, "pred.Y.a0"]))
## Imputed Y_i(1,0) of matches - regression
data$Yhat10.r <- data$pred.Y.a1
data[unique(tm.second.a0$index.control), "Yhat10.r"] <- tapply(tm.second.a0$index.treated, tm.second.a0$index.control, function(x) mean(data[x, "pred.Y.a1"]))
## regression imputations of the CEF under 1-A_i
## (1/L) \sum_{j \in J^a(i)} mu_{1-A_i,0}(X_j, 1-A_i)
data$pred.Y.1.A.r <- data[[treatment]] * data$Yhat00.r + (1 - data[[treatment]]) * data$Yhat10.r
## Linearized form for bootstrapping
sm.part <- (1 - data[[mediator]]) * (1 + data$KLa/L_a + data$KLm/L_m + data$SLm/(L_a*L_m)) * data[[outcome]]
bm.part <- ((1 - data[[mediator]])*(data$KLm/L_a + data$SLm/(L_a*L_m)) - data[[mediator]]*(1 + data$KLa/L_a))*data$pred.Y.m0
ba.part <- data$pred.Y.1.A + (data$KLa/L_a)*data$pred.Y.A
data$tau.i <- (2 * data[[treatment]] - 1) * (sm.part - bm.part - ba.part)
## Point estimate
tau <- mean(data$tau.i)
########################################
## Variance estimation
########################################
if (boot == F){
###############
### Asymptotic variance
###################
### Calculate weights
data$ww <- (1 - data[[mediator]]) * (1 + data$KLa/L_a + data$KLm/L_m + data$SLm/(L_a*L_m))
### Number of units with M=0
N0 <- sum(1 - data[[mediator]])
### Parameters in the first-stage regression
P1 <- length(coef(s1.reg.0))
### Parameters in the second-stage regression
P2 <- length(coef(s2.reg))
### Variance component 1
data$em.var <- (N0/(N0 - P1)) * (data[[outcome]] - data$pred.Y.m0)^2
### Variance component 2
data$ea.var <- (N/(N-P2)) * (data$pred.Y.m0 - data$pred.Y.A)^2
### Variance component 3
tau.var <- mean((data$pred.Y.a1 - data$pred.Y.a0 - tau)^2)
### combine all three components
se.est2 <- sqrt(tau.var/N + (mean((1-data[[mediator]]) * data$ww^2 * data$em.var) + mean((1+data$KLa/L_a)^2*data$ea.var))/N)
### No bootstrap
Tstar <- NULL
### CI bounds
ci.low = tau - abs(qnorm(ci.alpha/2))*se.est2
ci.high = tau + abs(qnorm(ci.alpha/2))*se.est2
}else{
################
### Wild Bootstrap
################
## De-mean
tau.norm <- data$tau.i - tau
## Bootstrap iterations
W.bern <- sapply(1:nBoot, function(x) rbinom(N, 1, prob = (sqrt(5) - 1)/(2*sqrt(5))))
Wstar <- (((sqrt(5) + 1)/2)*W.bern + (-(sqrt(5) - 1)/2)*(1-W.bern))/N
## Apply bootstrap weights to each "observation"
Tstar <- (t(Wstar) %*% tau.norm)
## Add in tau
Tstar <- Tstar + tau
### Asypmtotic estimate is null
se.est2 <- NULL
### Get quantiles for the CI
ci.low = quantile(Tstar, ci.alpha/2)
ci.high = quantile(Tstar, 1 - ci.alpha/2)
}
### Return output
output <- list(outcome = outcome, treatment = treatment, mediator = mediator, s1.formula = s1.formula, s2.formula = s2.formula,
N = N, L_m = L_m, L_a = L_a, N_summary = n_summary,
estimate=tau, std.err = se.est2, boot.dist=as.vector(Tstar), KLm = data$KLm,
KLa = data$KLa, outcome.vec = data[[outcome]], treatment.vec = data[[treatment]], mediator.vec = data[[mediator]],
pre.treatment = pre.treatment, post.treatment = post.treatment,
conf.low = ci.low, conf.high = ci.high, ci.level = ci)
class(output) <- "tmatch"
return(output)
}
#' Summarize telescope match objects
#'
#' @details \code{summary} method for \code{tmatch} objects returned by
#' \code{telescope_match}
#'
#' @param object an object of class \code{tmatch} -- results from a call to \code{telescope_match}
#'
summary.tmatch <- function(object){
summary_obj <- NULL
### Names of treatments/outcome
summary_obj$outcome <- object$outcome
summary_obj$treatment <- object$treatment
summary_obj$mediator <- object$mediator
### Covariates
summary_obj$pre.treatment <- object$pre.treatment
summary_obj$post.treatment <- object$post.treatment
### Sample size
summary_obj$sizes <- object$N_summary
### Number of units matched in each stage
summary_obj$L_m <- object$L_m
summary_obj$L_a <- object$L_a
### Estimates
if (!is.null(object$std.err)){
summary_obj$se.type = "Asymptotic"
summary_obj$std.err = object$std.err
}else{
summary_obj$se.type = "Bootstrap"
summary_obj$std.err = sd(object$boot.dist)
}
summary_obj$estimate = object$estimate
summary_obj$ci.level = object$ci.level
summary_obj$conf.low = object$conf.low
summary_obj$conf.high = object$conf.high
class(summary_obj) <- "summary.tmatch"
return(summary_obj)
}
print.summary.tmatch <- function(object, digits = max(3, getOption("digits") - 3)){
cat("Telescope matching results\n")
cat("----------------------------\n")
cat("Variables:\n")
cat(paste("Outcome: ", object$outcome, "\n", sep=""))
cat(paste("Treatment: ", object$treatment, "\n", sep=""))
cat(paste("Mediator: ", object$mediator, "\n", sep=""))
cat("----------------------------\n")
cat(paste("Pre-treatment Covariates: ", paste(object$pre.treatment, collapse = ", "), "\n", sep=""))
cat(paste("Post-treatment Covariates: ", paste(object$post.treatment, collapse = ", "), "\n", sep=""))
cat("----------------------------\n")
cat(paste("Number of units matched to each observation in first stage (mediator): ", object$L_m, "\n", sep=""))
cat(paste("Number of units matched to each observation in second stage (treatment): ", object$L_a, "\n", sep=""))
cat("----------------------------\n")
cat("Results:\n")
if (object$se.type == "Asymptotic"){
cat(paste("Estimated ACDE: ", format(object$estimate, digits=digits), "\n", sep=""))
cat(paste("Asymptotic Standard Error: ", format(object$std.err, digits=digits), "\n", sep=""))
cat(paste("Asymptotic ", format(object$ci.level, digits=digits), "% confidence interval: [", format(object$conf.low, digits=digits), ", ", format(object$conf.high, digits=digits), "]\n", sep=""))
}else if (object$se.type == "Bootstrap"){
cat(paste("Estimated ACDE: ", format(object$estimate, digits=digits), "\n", sep=""))
cat(paste("Bootstrap Standard Error: ", format(object$std.err, digits=digits), "\n", sep=""))
cat(paste("Bootstrap ", format(object$ci.level, digits=digits), "% confidence interval (percentile): [", format(object$conf.low, digits=digits), ", ", format(object$conf.low, digits=digits), "]\n", sep=""))
}else{
cat("Something went wrong with the summary - SEs not Asymptotic or Bootstrap\n")
}
cat("----------------------------\n")
cat("Sample sizes (N):\n")
cat(paste("Treatment = 0, Mediator = 0: ", object$sizes$N[object$sizes[[object$treatment]] == 0&object$sizes[[object$mediator]] == 0], "\n", sep=""))
cat(paste("Treatment = 0, Mediator = 1: ", object$sizes$N[object$sizes[[object$treatment]] == 0&object$sizes[[object$mediator]] == 1], "\n", sep=""))
cat(paste("Treatment = 1, Mediator = 0: ", object$sizes$N[object$sizes[[object$treatment]] == 1&object$sizes[[object$mediator]] == 0], "\n", sep=""))
cat(paste("Treatment = 1, Mediator = 1: ", object$sizes$N[object$sizes[[object$treatment]] == 1&object$sizes[[object$mediator]] == 1], "\n", sep=""))
cat("----------------------------\n")
}
#' Diagnostics for Telescope Match objects
#'
#' @details Provides matching diagnostics for \code{tmatch} objects returned by
#' \code{telescope_match}
#'
#' @param object an object of class \code{tmatch} -- results from a call to \code{telescope_match}
#' @param vars a formula object containing either the treatment or the mediator as the dependent variable (which denotes whether first-stage or
#' second-stage balance diagnostics are returned) and the covariates for which balance diagnostics are requested as the independent variables. Each covariate
#' or function of covariates (e.g. higher-order polynomials or interactions) should be separated by a +.
#' @param data the data frame used in the call to \code{telescope_match}
balance.tmatch <- function(object, vars, data){
##################
### Internal helper functions
##################
## Weighted variance, ecdf
### Taken from hadley/bigvis
weighted.var <- function(x, w = NULL, na.rm = FALSE) {
if (na.rm) {
na <- is.na(x) | is.na(w)
x <- x[!na]
w <- w[!na]
}
sum(w * (x - weighted.mean(x, w)) ^ 2) / (sum(w) - 1)
}
weighted.ecdf <- function(x, w) {
stopifnot(length(x) == length(w))
stopifnot(anyDuplicated(x) == 0)
ord <- order(x)
x <- x[ord]
w <- w[ord]
n <- sum(w)
wts <- cumsum(w / n)
f <- approxfun(x, wts, method = "constant", yleft = 0, yright = 1, f = 0)
class(f) <- c("wecdf", "ecdf", "stepfun", class(f))
attr(f, "call") <- sys.call()
environment(f)$nobs <- n
f
}
##################
### Sanity checks
##################
### Is the class a 'tmatch'
if (class(object) != "tmatch"){
stop("Error: 'object' not of class 'tmatch'")
}
### Does N of data match number of obs
if (nrow(data) != object$N){
stop("Error: number of rows in data not equal to 'N' parameter in object")
}
##########################
### Validating the formula
if (object$treatment == as.character(vars[2])){
### Balance diagnostics for treatment
get.balance = "treatment"
}else if (object$mediator == as.character(vars[2])){
### Balance diagnostics for mediator
get.balance = "mediator"
}else{
stop("Error: Left-hand side of 'vars' must be either the 'treatment' or the 'mediator' from 'object'")
}
###########################
### Validating the data frame
covariate.frame = tryCatch({model.matrix(vars, data)[,-1]},error = function(e) { stop("Could not extract all variables in 'formula' from data")})
### Generate weights on each observation
if (get.balance == "mediator"){
### If it's the mediator, all M=1 units get KLm+1, all M=0 get KLm
obs.weights <- (object$KLm/object$L_m + 1)*(data[[object$mediator]] == 1) + (object$KLm/object$L_m)*(data[[object$mediator]] == 0)
augmented.frame <- data.frame(cbind(data[[object$mediator]], obs.weights, covariate.frame))
colnames(augmented.frame)[1] <- "mediator"
}else if (get.balance == "treatment"){
### If it's the treatment, all A=1 units get KLa+1, all A=0 get KLa+1
obs.weights <- (object$KLa/object$L_a + 1)
augmented.frame <- data.frame(cbind(data[[object$treatment]], obs.weights, covariate.frame))
colnames(augmented.frame)[1] <- "treatment"
}
## Make a data-frame containing balance results
if (get.balance == "mediator"){
balance.frame <- data.frame(variable = colnames(augmented.frame)[-c(1,2)], Before_M0 = NA, Before_M1 = NA, After_M0 = NA, After_M1= NA)
}else if (get.balance == "treatment"){
balance.frame <- data.frame(variable = colnames(augmented.frame)[-c(1,2)], Before_A0 = NA, Before_A1 = NA, After_A0 = NA, After_A1= NA)
}
### For each term in vars (aside from the treatment and the weights)
for (variable in colnames(augmented.frame)[-c(1,2)]){
## Run the regression to get difference-in-means
if (get.balance == "mediator"){
## Unweighted difference
un.weight.reg <- lm(as.formula(paste(variable, "~", "mediator")), data=augmented.frame)
balance.frame[balance.frame$variable == variable,]$Before_M0 = coef(un.weight.reg)[1] ## Intercept is M = 0
balance.frame[balance.frame$variable == variable,]$Before_M1 = coef(un.weight.reg)[1] + coef(un.weight.reg)[2] ## Intercept + Beta1 is M = 1
## Weighted difference
balance.reg <- lm(as.formula(paste(variable, "~", "mediator")), data=augmented.frame, weights=obs.weights)
balance.frame[balance.frame$variable == variable,]$After_M0 = coef(balance.reg)[1] ## Intercept is M = 0
balance.frame[balance.frame$variable == variable,]$After_M1 = coef(balance.reg)[1] + coef(balance.reg)[2] ## Intercept + Beta1 is M = 1
}else if (get.balance == "treatment"){
## Unweighted difference
un.weight.reg <- lm(as.formula(paste(variable, "~", "treatment")), data=augmented.frame)
balance.frame[balance.frame$variable == variable,]$Before_A0 = coef(un.weight.reg)[1] ## Intercept is A = 0
balance.frame[balance.frame$variable == variable,]$Before_A1 = coef(un.weight.reg)[1] + coef(un.weight.reg)[2] ## Intercept + Beta1 is A = 1
## Weighted difference
balance.reg <- lm(as.formula(paste(variable, "~", "treatment")), data=augmented.frame, weights=obs.weights)
balance.frame[balance.frame$variable == variable,]$After_A0 = coef(balance.reg)[1] ## Intercept is M = 0
balance.frame[balance.frame$variable == variable,]$After_A1 = coef(balance.reg)[1] + coef(balance.reg)[2] ## Intercept + Beta1 is M = 1
}
}
## Output
return(balance.frame)
}
#' Histograms of matching weights
#'
#' @details Provides histograms of the number of times each unit is used as a match given a  \code{tmatch} object returned by
#' \code{telescope_match}
#'
#' @param object an object of class \code{tmatch} -- results from a call to \code{telescope_match}
#' @param stage a character vector equal to either 'mediator' or 'treatment'. If equal to 'mediator', returns a histogram
#' of matching weights for units with mediator = 0. If equal to 'treatment', returns a histogram of matching weights for
#' all units.
plotDiag.tmatch <- function(object, stage = "mediator"){
##################
### Sanity checks
##################
### Is the class a 'tmatch'
if (class(object) != "tmatch"){
stop("Error: 'object' not of class 'tmatch'")
}
if (stage != "mediator" & stage != "treatment"){
stop("Error: 'stage' must be either 'mediator' or 'treatment'.")
}
#######################
### Main output
#######################
### If it's mediator, plot the histogram of K_Lm for mediator == 0
if (stage == "mediator"){
print(object$KLm[object$mediator.vec == 0])
plot_title = paste("Matching weights for first stage (mediator) for M = 0\nNumber of matches per unit = ", object$L_m, sep = "")
hist(object$KLm[object$mediator.vec == 0], main=plot_title)
vline(xintercept = object$L_m, col="red")
}else if (stage == "treatment"){
plot_title = paste("Matching weights for second stage (treatment) \nNumber of matches per unit = ", object$L_a, sep = "")
hist(object$KLa, main=plot_title)
vline(xintercept = object$L_a, col="red")
}
}
### Estimate ACDE for women
telescopeMatch.result.0 <-  telescope_match(outcome = "exhealth30", treatment = "treat", mediator = "work2year2q",
s1.formula = tm_stage1,
s2.formula = tm_stage2, data=jobcorps_female,
L=c(3,2), boot=F, nBoot=1000, verbose=T, ci=95)
summary(telescopeMatch.result.0)
balance.tmatch(telescopeMatch.result.0, vars =  treat ~ emplq4 + jobyrbef, data=jobcorps_female)
plotDiag.tmatch(telescopeMatch.result.0, "mediator")
plotDiag.tmatch <- function(object, stage = "mediator"){
##################
### Sanity checks
##################
### Is the class a 'tmatch'
if (class(object) != "tmatch"){
stop("Error: 'object' not of class 'tmatch'")
}
if (stage != "mediator" & stage != "treatment"){
stop("Error: 'stage' must be either 'mediator' or 'treatment'.")
}
#######################
### Main output
#######################
### If it's mediator, plot the histogram of K_Lm for mediator == 0
if (stage == "mediator"){
plot_title = paste("Matching weights for first stage (mediator) for M = 0\nNumber of matches per unit = ", object$L_m, sep = "")
hist(object$KLm[object$mediator.vec == 0], main=plot_title)
abline(v = object$L_m, col="red")
}else if (stage == "treatment"){
plot_title = paste("Matching weights for second stage (treatment) \nNumber of matches per unit = ", object$L_a, sep = "")
hist(object$KLa, main=plot_title)
abline(v = object$L_a, col="red")
}
}
plotDiag.tmatch(telescopeMatch.result.0, "mediator")
plotDiag.tmatch <- function(object, stage = "mediator"){
##################
### Sanity checks
##################
### Is the class a 'tmatch'
if (class(object) != "tmatch"){
stop("Error: 'object' not of class 'tmatch'")
}
if (stage != "mediator" & stage != "treatment"){
stop("Error: 'stage' must be either 'mediator' or 'treatment'.")
}
#######################
### Main output
#######################
### If it's mediator, plot the histogram of K_Lm for mediator == 0
if (stage == "mediator"){
plot_title = paste("Matching weights for first stage (mediator) among M = 0\nNumber of matches per unit = ", object$L_m, sep = "")
hist(object$KLm[object$mediator.vec == 0], main=plot_title, xlab="Number of times unit is matched")
abline(v = object$L_m, col="red")
}else if (stage == "treatment"){
plot_title = paste("Matching weights for second stage (treatment) \nNumber of matches per unit = ", object$L_a, sep = "")
hist(object$KLa, main=plot_title, xlab="Number of times unit is matched")
abline(v = object$L_a, col="red")
}
}
plotDiag.tmatch(telescopeMatch.result.0, "mediator")
plotDiag.tmatch(telescopeMatch.result.0, "treatment")
plotDiag.tmatch <- function(object, stage = "mediator"){
##################
### Sanity checks
##################
### Is the class a 'tmatch'
if (class(object) != "tmatch"){
stop("Error: 'object' not of class 'tmatch'")
}
if (stage != "mediator" & stage != "treatment"){
stop("Error: 'stage' must be either 'mediator' or 'treatment'.")
}
#######################
### Main output
#######################
### If it's mediator, plot the histogram of K_Lm for mediator == 0
if (stage == "mediator"){
plot_title = paste("Matching weights for first stage (mediator) among M = 0\nNumber of matches per unit = ", object$L_m, sep = "")
hist(object$KLm[object$mediator.vec == 0], main=plot_title, xlab="Number of times unit is matched")
abline(v = object$L_m, col="red", lty=2, lwd=2)
}else if (stage == "treatment"){
plot_title = paste("Matching weights for second stage (treatment) \nNumber of matches per unit = ", object$L_a, sep = "")
hist(object$KLa, main=plot_title, xlab="Number of times unit is matched")
abline(v = object$L_a, col="red", lty=2, lwd=2)
}
}
plotDiag.tmatch(telescopeMatch.result.0, "treatment")
plotDiag.tmatch(telescopeMatch.result.0, "mediator")
plotDiag.tmatch <- function(object, stage = "mediator"){
##################
### Sanity checks
##################
### Is the class a 'tmatch'
if (class(object) != "tmatch"){
stop("Error: 'object' not of class 'tmatch'")
}
if (stage != "mediator" & stage != "treatment"){
stop("Error: 'stage' must be either 'mediator' or 'treatment'.")
}
#######################
### Main output
#######################
### If it's mediator, plot the histogram of K_Lm for mediator == 0
if (stage == "mediator"){
plot_title = paste("Matching weights for first stage (mediator) among M = 0\nNumber of matches per unit = ", sep = "")
hist(object$KLm[object$mediator.vec == 0]/object$L_m, main=plot_title, xlab="Number of times unit is matched")
abline(v = 1, col="red", lty=2, lwd=2)
}else if (stage == "treatment"){
plot_title = paste("Matching weights for second stage (treatment) \nNumber of matches per unit = ", object$L_a, sep = "")
hist(object$KLa/object$L_a, main=plot_title, xlab="Number of times unit is matched")
abline(v = 1, col="red", lty=2, lwd=2)
}
}
plotDiag.tmatch(telescopeMatch.result.0, "mediator")
plotDiag.tmatch <- function(object, stage = "mediator"){
##################
### Sanity checks
##################
### Is the class a 'tmatch'
if (class(object) != "tmatch"){
stop("Error: 'object' not of class 'tmatch'")
}
if (stage != "mediator" & stage != "treatment"){
stop("Error: 'stage' must be either 'mediator' or 'treatment'.")
}
#######################
### Main output
#######################
### If it's mediator, plot the histogram of K_Lm for mediator == 0
if (stage == "mediator"){
plot_title = paste("Matching weights for first stage (mediator) among M = 0")
hist(object$KLm[object$mediator.vec == 0]/object$L_m, main=plot_title, xlab="Number of times unit is matched")
abline(v = 1, col="red", lty=2, lwd=2)
}else if (stage == "treatment"){
plot_title = paste("Matching weights for second stage (treatment)")
hist(object$KLa/object$L_a, main=plot_title, xlab="Number of times unit is matched")
abline(v = 1, col="red", lty=2, lwd=2)
}
}
plotDiag.tmatch(telescopeMatch.result.0, "mediator")
plotDiag.tmatch(telescopeMatch.result.0, "treatment")
